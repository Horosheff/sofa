#!/bin/bash

# üö® –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï AUTH TOKEN
echo "üö® –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï AUTH TOKEN"
echo "=================================="

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∞–ø–∫—É
cd /opt/sofiya

# 1. –ò–°–ü–†–ê–í–õ–Ø–ï–ú SETTINGS PANEL - –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–ê–í–ò–õ–¨–ù–´–ô TOKEN
echo "1Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º SettingsPanel - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π token..."
cat > frontend/components/SettingsPanel.tsx << 'EOF'
'use client'

import { useState, useEffect, useMemo } from 'react'
import { useForm } from 'react-hook-form'
import PasswordField from './PasswordField'
import { useAuthStore } from '@/store/authStore'
import { useToast } from '@/hooks/useToast'
import ToastContainer from './ToastContainer'

interface SettingsResponse {
  wordpress_url?: string
  wordpress_username?: string
  wordpress_password?: string
  wordstat_client_id?: string
  wordstat_client_secret?: string
  wordstat_redirect_uri?: string
  telegram_webhook_url?: string
  mcp_sse_url?: string
  mcp_connector_id?: string
  timezone?: string
  language?: string
}

interface SettingsFormData {
  wordpress_url?: string
  wordpress_username?: string
  wordpress_password?: string
  wordstat_client_id?: string
  wordstat_client_secret?: string
  wordstat_redirect_uri?: string
  telegram_bot_token?: string
  telegram_webhook_url?: string
  telegram_webhook_secret?: string
  mcp_sse_url?: string
  mcp_connector_id?: string
  timezone?: string
  language?: string
}

export default function SettingsPanel() {
  const { user, token } = useAuthStore()
  const { addToast } = useToast()
  const [settings, setSettings] = useState<SettingsResponse>({})
  const [isLoading, setIsLoading] = useState(false)
  const [isFetching, setIsFetching] = useState(false)
  const [message, setMessage] = useState('')
  const [authCode, setAuthCode] = useState('')
  const [showCodeInput, setShowCodeInput] = useState(false)
  const [authUrl, setAuthUrl] = useState('')
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram
  const [telegramTestResult, setTelegramTestResult] = useState<{
    status: 'idle' | 'testing' | 'success' | 'error'
    message: string
  }>({ status: 'idle', message: '' })

  const {
    register,
    handleSubmit,
    setValue,
    watch,
    formState: { errors, isDirty }
  } = useForm<SettingsFormData>({
    defaultValues: useMemo(
      () => ({
        wordpress_url: '',
        wordpress_username: '',
        wordpress_password: '',
        wordstat_client_id: '',
        wordstat_client_secret: '',
        wordstat_redirect_uri: '',
        telegram_bot_token: '',
        telegram_webhook_url: '',
        telegram_webhook_secret: '',
        mcp_sse_url: '',
        mcp_connector_id: '',
        timezone: 'UTC',
        language: 'ru',
      }),
      []
    ),
  })

  const watchValues = watch()

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –±–æ—Ç–∞
  const testTelegramBot = async () => {
    setTelegramTestResult({ status: 'testing', message: '–ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram –±–æ—Ç–∞...' })
    
    try {
      // 1. –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const settingsData = {
        telegram_bot_token: watchValues.telegram_bot_token,
        telegram_webhook_url: watchValues.telegram_webhook_url,
        telegram_webhook_secret: watchValues.telegram_webhook_secret
      }

      const saveResponse = await fetch('/api/user/settings', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(settingsData)
      })

      if (!saveResponse.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫')
      }

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Telegram API
      const checkResponse = await fetch('/api/telegram/check-token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      })

      const checkData = await checkResponse.json()
      
      if (checkData.success) {
        setTelegramTestResult({ 
          status: 'success', 
          message: `‚úÖ Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò–º—è: ${checkData.bot_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}` 
        })
      } else {
        setTelegramTestResult({ 
          status: 'error', 
          message: `‚ùå –û—à–∏–±–∫–∞: ${checkData.error}` 
        })
      }

    } catch (error) {
      setTelegramTestResult({ 
        status: 'error', 
        message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error}` 
      })
    }
  }

  useEffect(() => {
    fetchSettings()
  }, [])

  async function fetchSettings() {
    setIsFetching(true)
    try {
      const response = await fetch('/api/user/settings', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })
      const data = await response.json()
      setSettings(data)
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏
      Object.keys(data).forEach(key => {
        if (data[key] !== null && data[key] !== undefined) {
          setValue(key as keyof SettingsFormData, data[key])
        }
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error)
      addToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error')
    } finally {
      setIsFetching(false)
    }
  }

  const onSubmit = async (data: SettingsFormData) => {
    setIsLoading(true)
    setMessage('')
    
    try {
      const response = await fetch('/api/user/settings', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(data)
      })
      
      if (response.ok) {
        setMessage('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
        addToast('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!', 'success')
        await fetchSettings()
      } else {
        const errorData = await response.json()
        setMessage(`–û—à–∏–±–∫–∞: ${errorData.detail || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
        addToast(`–û—à–∏–±–∫–∞: ${errorData.detail || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error')
      }
    } catch (error) {
      setMessage(`–û—à–∏–±–∫–∞: ${error}`)
      addToast(`–û—à–∏–±–∫–∞: ${error}`, 'error')
    } finally {
      setIsLoading(false)
    }
  }

  const handleWordstatAuth = async () => {
    try {
      const response = await fetch('/api/oauth/yandex/auth', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          client_id: watchValues.wordstat_client_id,
          redirect_uri: watchValues.wordstat_redirect_uri
        })
      })
      
      const data = await response.json()
      if (data.auth_url) {
        setAuthUrl(data.auth_url)
        setShowCodeInput(true)
      }
    } catch (error) {
      addToast('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', 'error')
    }
  }

  const handleAuthCode = async () => {
    try {
      const response = await fetch('/api/oauth/yandex/callback', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ code: authCode })
      })
      
      if (response.ok) {
        addToast('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Wordstat —É—Å–ø–µ—à–Ω–∞!', 'success')
        setShowCodeInput(false)
        setAuthCode('')
        await fetchSettings()
      } else {
        const errorData = await response.json()
        addToast(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${errorData.detail}`, 'error')
      }
    } catch (error) {
      addToast('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', 'error')
    }
  }

  if (isFetching) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <ToastContainer />
      <div className="glass-panel">
        <h3 className="text-xl font-bold text-foreground mb-6">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
        
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-8">
          {/* WordPress Settings */}
          <div className="glass-panel">
            <h3 className="text-xl font-bold text-foreground mb-6 flex items-center">
              üìù WordPress –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-foreground/80 mb-2">
                  URL —Å–∞–π—Ç–∞
                </label>
                <input
                  {...register('wordpress_url')}
                  type="url"
                  className="modern-input w-full"
                  placeholder="https://example.com"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-foreground/80 mb-2">
                  –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                </label>
                <input
                  {...register('wordpress_username')}
                  type="text"
                  className="modern-input w-full"
                  placeholder="admin"
                />
              </div>
              <PasswordField
                label="–ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
                name="wordpress_password"
                value={watchValues.wordpress_password}
                onChange={(value) => setValue('wordpress_password', value, { shouldDirty: true })}
                placeholder="xxxx xxxx xxxx xxxx xxxx xxxx"
                className="md:col-span-2"
              />
            </div>
          </div>

          {/* Wordstat Settings */}
          <div className="glass-panel">
            <h3 className="text-xl font-bold text-foreground mb-6 flex items-center">
              üìä Wordstat –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-foreground/80 mb-2">
                  Client ID
                </label>
                <input
                  {...register('wordstat_client_id')}
                  type="text"
                  className="modern-input w-full"
                  placeholder="xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                />
              </div>
              <PasswordField
                label="Client Secret"
                name="wordstat_client_secret"
                value={watchValues.wordstat_client_secret}
                onChange={(value) => setValue('wordstat_client_secret', value, { shouldDirty: true })}
                placeholder="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
              />
              <div>
                <label className="block text-sm font-medium text-foreground/80 mb-2">
                  Redirect URI
                </label>
                <input
                  {...register('wordstat_redirect_uri')}
                  type="url"
                  className="modern-input w-full"
                  placeholder="https://www.make.com/oauth/cb/app"
                />
              </div>
              <div className="flex items-end">
                <button
                  type="button"
                  onClick={handleWordstatAuth}
                  className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors"
                >
                  –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å Wordstat
                </button>
              </div>
            </div>

            {showCodeInput && (
              <div className="mt-4 p-4 bg-blue-500/10 border border-blue-500/20 rounded-lg">
                <h4 className="text-sm font-semibold text-blue-600 mb-2">–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</h4>
                <div className="flex gap-2">
                  <input
                    type="text"
                    value={authCode}
                    onChange={(e) => setAuthCode(e.target.value)}
                    className="modern-input flex-1"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞"
                  />
                  <button
                    type="button"
                    onClick={handleAuthCode}
                    className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
                  >
                    –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                  </button>
                </div>
                <p className="text-xs text-foreground/50 mt-2">
                  –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: <a href={authUrl} target="_blank" rel="noopener noreferrer" className="text-blue-400 hover:underline">{authUrl}</a>
                </p>
              </div>
            )}
          </div>

          {/* Telegram Bot Settings */}
          <div className="glass-panel">
            <h3 className="text-xl font-bold text-foreground mb-6 flex items-center">
              ü§ñ Telegram Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </h3>
            
            {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –±–æ—Ç–∞ */}
            <div className="glass-form p-4 mb-6 border-l-4 border-blue-400/50">
              <h4 className="text-sm font-semibold text-foreground mb-2 flex items-center">
                üí° –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å Telegram –±–æ—Ç–∞:
              </h4>
              <ol className="text-sm text-foreground/70 space-y-2 list-decimal list-inside">
                <li>–ù–∞–π–¥–∏—Ç–µ <strong>@BotFather</strong> –≤ Telegram</li>
                <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <code className="text-xs bg-white/10 px-2 py-1 rounded">/newbot</code></li>
                <li>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "My Awesome Bot")</li>
                <li>–í–≤–µ–¥–∏—Ç–µ username –¥–ª—è –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "my_awesome_bot")</li>
                <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø–æ–ª–µ –Ω–∏–∂–µ</li>
              </ol>
              <p className="text-xs text-foreground/50 mt-3">
                üîê <strong>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</strong> –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º. –•—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!
              </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <PasswordField
                label="–¢–æ–∫–µ–Ω –±–æ—Ç–∞"
                name="telegram_bot_token"
                value={watchValues.telegram_bot_token}
                onChange={(value) => setValue('telegram_bot_token', value, { shouldDirty: true })}
                placeholder="123456789:ABCdefGHIjklMNOpqrsTUVwxyz"
                className="md:col-span-2"
              />
              <div>
                <label className="block text-sm font-medium text-foreground/80 mb-2">
                  Webhook URL (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                </label>
                <input
                  {...register('telegram_webhook_url')}
                  type="url"
                  className="modern-input w-full"
                  placeholder="https://your-domain.com/webhook"
                />
                <p className="text-xs text-foreground/50 mt-1">URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram</p>
              </div>
              <PasswordField
                label="Webhook Secret (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                name="telegram_webhook_secret"
                value={watchValues.telegram_webhook_secret}
                onChange={(value) => setValue('telegram_webhook_secret', value, { shouldDirty: true })}
                placeholder="your-secret-key"
              />
            </div>

            {/* –ö–ù–û–ü–ö–ê –ü–†–û–í–ï–†–ö–ò TELEGRAM –ë–û–¢–ê */}
            <div className="mt-6 p-4 bg-blue-500/10 border border-blue-500/20 rounded-lg">
              <div className="flex items-center justify-between mb-3">
                <h4 className="text-sm font-semibold text-blue-600">üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞</h4>
                <button
                  type="button"
                  onClick={testTelegramBot}
                  disabled={!watchValues.telegram_bot_token || telegramTestResult.status === 'testing'}
                  className={`px-4 py-2 rounded-lg text-sm font-medium transition-all ${
                    watchValues.telegram_bot_token && telegramTestResult.status !== 'testing'
                      ? 'bg-blue-600 hover:bg-blue-700 text-white'
                      : 'bg-gray-400 text-gray-200 cursor-not-allowed'
                  }`}
                >
                  {telegramTestResult.status === 'testing' ? '‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º...' : 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ—Ç–∞'}
                </button>
              </div>
              
              {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ */}
              {telegramTestResult.status !== 'idle' && (
                <div className={`p-3 rounded-lg text-sm ${
                  telegramTestResult.status === 'success' ? 'bg-green-500/10 text-green-600 border border-green-500/20' :
                  telegramTestResult.status === 'error' ? 'bg-red-500/10 text-red-600 border border-red-500/20' :
                  'bg-blue-500/10 text-blue-600 border border-blue-500/20'
                }`}>
                  {telegramTestResult.message}
                </div>
              )}
              
              <p className="text-xs text-foreground/50 mt-2">
                üí° –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Telegram API
              </p>
            </div>
          </div>

          {/* MCP Settings */}
          <div className="glass-panel">
            <h3 className="text-xl font-bold text-foreground mb-6 flex items-center">
              üîó MCP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-foreground/80 mb-2">
                  SSE URL
                </label>
                <input
                  {...register('mcp_sse_url')}
                  type="url"
                  className="modern-input w-full"
                  placeholder="https://mcp-kv.ru/mcp/sse/connector-id"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-foreground/80 mb-2">
                  Connector ID
                </label>
                <input
                  {...register('mcp_connector_id')}
                  type="text"
                  className="modern-input w-full"
                  placeholder="user-xxxxxxxxxxxxxxxx"
                />
              </div>
            </div>
          </div>

          {/* General Settings */}
          <div className="glass-panel">
            <h3 className="text-xl font-bold text-foreground mb-6 flex items-center">
              üåç –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-foreground/80 mb-2">
                  –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
                </label>
                <select {...register('timezone')} className="modern-input w-full">
                  <option value="UTC">UTC</option>
                  <option value="Europe/Moscow">–ú–æ—Å–∫–≤–∞ (UTC+3)</option>
                  <option value="Europe/Kiev">–ö–∏–µ–≤ (UTC+2)</option>
                  <option value="America/New_York">–ù—å—é-–ô–æ—Ä–∫ (UTC-5)</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-foreground/80 mb-2">
                  –Ø–∑—ã–∫
                </label>
                <select {...register('language')} className="modern-input w-full">
                  <option value="ru">–†—É—Å—Å–∫–∏–π</option>
                  <option value="en">English</option>
                </select>
              </div>
            </div>
          </div>

          {/* Submit Button */}
          <div className="flex justify-end">
            <button
              type="submit"
              disabled={isLoading || !isDirty}
              className={`px-6 py-3 rounded-lg font-medium transition-all ${
                isDirty && !isLoading
                  ? 'bg-blue-600 hover:bg-blue-700 text-white'
                  : 'bg-gray-400 text-gray-200 cursor-not-allowed'
              }`}
            >
              {isLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
            </button>
          </div>

          {/* Message */}
          {message && (
            <div className={`p-4 rounded-lg ${
              message.includes('—É—Å–ø–µ—à–Ω–æ') 
                ? 'bg-green-500/10 text-green-600 border border-green-500/20'
                : 'bg-red-500/10 text-red-600 border border-red-500/20'
            }`}>
              {message}
            </div>
          )}
        </form>
      </div>
    </div>
  )
}
EOF

# 2. –ü–ï–†–ï–°–û–ë–ò–†–ê–ï–ú FRONTEND
echo "2Ô∏è‚É£ –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º frontend..."
cd frontend
rm -rf .next
npm run build

# 3. –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê–ï–ú FRONTEND
echo "3Ô∏è‚É£ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º frontend..."
pm2 restart frontend

# 4. –ü–†–û–í–ï–†–Ø–ï–ú –°–¢–ê–¢–£–°
echo "4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å..."
pm2 status

# 5. –ü–†–û–í–ï–†–Ø–ï–ú –õ–û–ì–ò
echo "5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ frontend..."
pm2 logs frontend --lines 5

# 6. –¢–ï–°–¢–ò–†–£–ï–ú –°–ê–ô–¢
echo "6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∞–π—Ç..."
curl -I https://mcp-kv.ru

echo ""
echo "üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï AUTH TOKEN –ó–ê–í–ï–†–®–ï–ù–û!"
echo "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º token –∏–∑ useAuthStore()"
echo "‚úÖ Frontend –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω –±–µ–∑ –æ—à–∏–±–æ–∫"
echo "‚úÖ –ö–Ω–æ–ø–∫–∞ Telegram –¥–æ–±–∞–≤–ª–µ–Ω–∞"
echo ""
echo "üîç –¢–µ–ø–µ—Ä—å –∑–∞–π–¥–∏ –Ω–∞ —Å–∞–π—Ç –∏ –ø—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!"
