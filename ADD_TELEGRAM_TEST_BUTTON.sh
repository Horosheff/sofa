#!/bin/bash

# üéØ –î–û–ë–ê–í–õ–Ø–ï–ú –ö–ù–û–ü–ö–£ –ü–†–û–í–ï–†–ö–ò TELEGRAM –ë–û–¢–ê
echo "üéØ –î–û–ë–ê–í–õ–Ø–ï–ú –ö–ù–û–ü–ö–£ –ü–†–û–í–ï–†–ö–ò TELEGRAM –ë–û–¢–ê"
echo "=========================================="

# –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—á –¥–ª—è SettingsPanel.tsx
cat > frontend/components/SettingsPanel.tsx << 'EOF'
// ... existing imports ...

export default function SettingsPanel() {
  // ... existing code ...

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram
  const [telegramTestResult, setTelegramTestResult] = useState<{
    status: 'idle' | 'testing' | 'success' | 'error'
    message: string
  }>({ status: 'idle', message: '' })

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –±–æ—Ç–∞
  const testTelegramBot = async () => {
    setTelegramTestResult({ status: 'testing', message: '–ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram –±–æ—Ç–∞...' })
    
    try {
      // 1. –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const settingsData = {
        telegram_bot_token: watchValues.telegram_bot_token,
        telegram_webhook_url: watchValues.telegram_webhook_url,
        telegram_webhook_secret: watchValues.telegram_webhook_secret
      }

      const saveResponse = await fetch('/api/user/settings', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${user?.token}`
        },
        body: JSON.stringify(settingsData)
      })

      if (!saveResponse.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫')
      }

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –≤ –±–∞–∑–µ
      const checkResponse = await fetch('/api/telegram/check-token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${user?.token}`
        }
      })

      const checkData = await checkResponse.json()
      
      if (checkData.success) {
        setTelegramTestResult({ 
          status: 'success', 
          message: `‚úÖ Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò–º—è: ${checkData.bot_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}` 
        })
      } else {
        setTelegramTestResult({ 
          status: 'error', 
          message: `‚ùå –û—à–∏–±–∫–∞: ${checkData.error}` 
        })
      }

    } catch (error) {
      setTelegramTestResult({ 
        status: 'error', 
        message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error}` 
      })
    }
  }

  return (
    <div className="space-y-6">
      {/* ... existing code ... */}

      {/* Telegram Bot Settings */}
      <div className="glass-panel">
        <h3 className="text-xl font-bold text-foreground mb-6 flex items-center">
          ü§ñ Telegram Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        </h3>
        
        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –±–æ—Ç–∞ */}
        <div className="glass-form p-4 mb-6 border-l-4 border-blue-400/50">
          <h4 className="text-sm font-semibold text-foreground mb-2 flex items-center">
            üí° –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å Telegram –±–æ—Ç–∞:
          </h4>
          <ol className="text-sm text-foreground/70 space-y-2 list-decimal list-inside">
            <li>–ù–∞–π–¥–∏—Ç–µ <strong>@BotFather</strong> –≤ Telegram</li>
            <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <code className="text-xs bg-white/10 px-2 py-1 rounded">/newbot</code></li>
            <li>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "My Awesome Bot")</li>
            <li>–í–≤–µ–¥–∏—Ç–µ username –¥–ª—è –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "my_awesome_bot")</li>
            <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø–æ–ª–µ –Ω–∏–∂–µ</li>
          </ol>
          <p className="text-xs text-foreground/50 mt-3">
            üîê <strong>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</strong> –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º. –•—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <PasswordField
            label="–¢–æ–∫–µ–Ω –±–æ—Ç–∞"
            name="telegram_bot_token"
            value={watchValues.telegram_bot_token}
            onChange={(value) => setValue('telegram_bot_token', value, { shouldDirty: true })}
            placeholder="123456789:ABCdefGHIjklMNOpqrsTUVwxyz"
            className="md:col-span-2"
          />
          <div>
            <label className="block text-sm font-medium text-foreground/80 mb-2">
              Webhook URL (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            </label>
            <input
              {...register('telegram_webhook_url')}
              type="url"
              className="modern-input w-full"
              placeholder="https://your-domain.com/webhook"
            />
            <p className="text-xs text-foreground/50 mt-1">URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram</p>
          </div>
          <PasswordField
            label="Webhook Secret (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
            name="telegram_webhook_secret"
            value={watchValues.telegram_webhook_secret}
            onChange={(value) => setValue('telegram_webhook_secret', value, { shouldDirty: true })}
            placeholder="your-secret-key"
          />
        </div>

        {/* –ö–ù–û–ü–ö–ê –ü–†–û–í–ï–†–ö–ò TELEGRAM –ë–û–¢–ê */}
        <div className="mt-6 p-4 bg-blue-500/10 border border-blue-500/20 rounded-lg">
          <div className="flex items-center justify-between mb-3">
            <h4 className="text-sm font-semibold text-blue-600">üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞</h4>
            <button
              type="button"
              onClick={testTelegramBot}
              disabled={!watchValues.telegram_bot_token || telegramTestResult.status === 'testing'}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-all ${
                watchValues.telegram_bot_token && telegramTestResult.status !== 'testing'
                  ? 'bg-blue-600 hover:bg-blue-700 text-white'
                  : 'bg-gray-400 text-gray-200 cursor-not-allowed'
              }`}
            >
              {telegramTestResult.status === 'testing' ? '‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º...' : 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ—Ç–∞'}
            </button>
          </div>
          
          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ */}
          {telegramTestResult.status !== 'idle' && (
            <div className={`p-3 rounded-lg text-sm ${
              telegramTestResult.status === 'success' ? 'bg-green-500/10 text-green-600 border border-green-500/20' :
              telegramTestResult.status === 'error' ? 'bg-red-500/10 text-red-600 border border-red-500/20' :
              'bg-blue-500/10 text-blue-600 border border-blue-500/20'
            }`}>
              {telegramTestResult.message}
            </div>
          )}
          
          <p className="text-xs text-foreground/50 mt-2">
            üí° –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Telegram API
          </p>
        </div>
      </div>

      {/* ... existing code ... */}
    </div>
  )
}
EOF

# –°–æ–∑–¥–∞–µ–º backend endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
cat > backend/app/telegram_check.py << 'EOF'
from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.orm import Session
from ..database import get_db
from ..models import User, UserSettings
from ..auth import get_current_user
import httpx
import logging

router = APIRouter()
logger = logging.getLogger(__name__)

@router.post("/telegram/check-token")
async def check_telegram_token(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings = db.query(UserSettings).filter(UserSettings.user_id == current_user.id).first()
        
        if not settings or not settings.telegram_bot_token:
            return {
                "success": False,
                "error": "–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Telegram API
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"https://api.telegram.org/bot{settings.telegram_bot_token}/getMe",
                timeout=10.0
            )
            
            if response.status_code == 200:
                bot_data = response.json()
                if bot_data.get("ok"):
                    return {
                        "success": True,
                        "bot_name": bot_data["result"].get("first_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        "bot_username": bot_data["result"].get("username", ""),
                        "bot_id": bot_data["result"].get("id", ""),
                        "message": "Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    }
                else:
                    return {
                        "success": False,
                        "error": f"–û—à–∏–±–∫–∞ Telegram API: {bot_data.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                    }
            else:
                return {
                    "success": False,
                    "error": f"HTTP {response.status_code}: {response.text}"
                }
                
    except httpx.TimeoutException:
        return {
            "success": False,
            "error": "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Telegram API"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram —Ç–æ–∫–µ–Ω–∞: {e}")
        return {
            "success": False,
            "error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}"
        }
EOF

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä –≤ main.py
echo "–î–æ–±–∞–≤–ª—è–µ–º Telegram check —Ä–æ—É—Ç–µ—Ä –≤ main.py..."

# –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—á –¥–ª—è main.py
cat >> backend/app/main.py << 'EOF'

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from .telegram_check import router as telegram_check_router

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä
app.include_router(telegram_check_router, prefix="/api", tags=["telegram-check"])
EOF

echo ""
echo "üéØ –ö–ù–û–ü–ö–ê –ü–†–û–í–ï–†–ö–ò TELEGRAM –ë–û–¢–ê –î–û–ë–ê–í–õ–ï–ù–ê!"
echo "‚úÖ Frontend: –ö–Ω–æ–ø–∫–∞ 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ—Ç–∞' –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"
echo "‚úÖ Backend: Endpoint /api/telegram/check-token"
echo "‚úÖ –§—É–Ω–∫—Ü–∏–∏: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ + –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ + —Ç–µ—Å—Ç API"
echo ""
echo "üöÄ –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å frontend –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å backend!"
