#!/bin/bash

# üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ü–£–¢–ò –î–õ–Ø –ö–ù–û–ü–ö–ò TELEGRAM –ë–û–¢–ê
echo "üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ü–£–¢–ò –î–õ–Ø –ö–ù–û–ü–ö–ò TELEGRAM –ë–û–¢–ê"
echo "=========================================="

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∞–ø–∫—É
cd /opt/sofiya

echo "üìÅ –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: $(pwd)"
echo "üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏:"
ls -la

echo ""
echo "üéØ –î–û–ë–ê–í–õ–Ø–ï–ú –ö–ù–û–ü–ö–£ –ü–†–û–í–ï–†–ö–ò TELEGRAM –ë–û–¢–ê"
echo "=========================================="

# 1. –°–û–ó–î–ê–ï–ú BACKEND ENDPOINT –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –¢–û–ö–ï–ù–ê
echo "1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º backend endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞..."
cat > backend/app/telegram_check.py << 'EOF'
from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.orm import Session
from ..database import get_db
from ..models import User, UserSettings
from ..auth import get_current_user
import httpx
import logging

router = APIRouter()
logger = logging.getLogger(__name__)

@router.post("/telegram/check-token")
async def check_telegram_token(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings = db.query(UserSettings).filter(UserSettings.user_id == current_user.id).first()
        
        if not settings or not settings.telegram_bot_token:
            return {
                "success": False,
                "error": "–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Telegram API
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"https://api.telegram.org/bot{settings.telegram_bot_token}/getMe",
                timeout=10.0
            )
            
            if response.status_code == 200:
                bot_data = response.json()
                if bot_data.get("ok"):
                    return {
                        "success": True,
                        "bot_name": bot_data["result"].get("first_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        "bot_username": bot_data["result"].get("username", ""),
                        "bot_id": bot_data["result"].get("id", ""),
                        "message": "Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    }
                else:
                    return {
                        "success": False,
                        "error": f"–û—à–∏–±–∫–∞ Telegram API: {bot_data.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                    }
            else:
                return {
                    "success": False,
                    "error": f"HTTP {response.status_code}: {response.text}"
                }
                
    except httpx.TimeoutException:
        return {
            "success": False,
            "error": "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Telegram API"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram —Ç–æ–∫–µ–Ω–∞: {e}")
        return {
            "success": False,
            "error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}"
        }
EOF

# 2. –î–û–ë–ê–í–õ–Ø–ï–ú –†–û–£–¢–ï–† –í MAIN.PY
echo "2Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä –≤ main.py..."
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–º–ø–æ—Ä—Ç
if ! grep -q "telegram_check" backend/app/main.py; then
    echo "–î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç telegram_check..."
    sed -i '/from \.admin_routes import router as admin_router/a from .telegram_check import router as telegram_check_router' backend/app/main.py
    
    echo "–î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä..."
    sed -i '/app.include_router(admin_router, prefix="/api", tags=\["admin"\])/a app.include_router(telegram_check_router, prefix="/api", tags=["telegram-check"])' backend/app/main.py
else
    echo "‚úÖ –†–æ—É—Ç–µ—Ä telegram_check —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω"
fi

# 3. –û–ë–ù–û–í–õ–Ø–ï–ú FRONTEND SETTINGS PANEL
echo "3Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º frontend SettingsPanel..."
# –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
cp frontend/components/SettingsPanel.tsx frontend/components/SettingsPanel.tsx.backup

# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram
cat > /tmp/telegram_test_state.tsx << 'EOF'
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram
  const [telegramTestResult, setTelegramTestResult] = useState<{
    status: 'idle' | 'testing' | 'success' | 'error'
    message: string
  }>({ status: 'idle', message: '' })

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –±–æ—Ç–∞
  const testTelegramBot = async () => {
    setTelegramTestResult({ status: 'testing', message: '–ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram –±–æ—Ç–∞...' })
    
    try {
      // 1. –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const settingsData = {
        telegram_bot_token: watchValues.telegram_bot_token,
        telegram_webhook_url: watchValues.telegram_webhook_url,
        telegram_webhook_secret: watchValues.telegram_webhook_secret
      }

      const saveResponse = await fetch('/api/user/settings', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${user?.token}`
        },
        body: JSON.stringify(settingsData)
      })

      if (!saveResponse.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫')
      }

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Telegram API
      const checkResponse = await fetch('/api/telegram/check-token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${user?.token}`
        }
      })

      const checkData = await checkResponse.json()
      
      if (checkData.success) {
        setTelegramTestResult({ 
          status: 'success', 
          message: `‚úÖ Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò–º—è: ${checkData.bot_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}` 
        })
      } else {
        setTelegramTestResult({ 
          status: 'error', 
          message: `‚ùå –û—à–∏–±–∫–∞: ${checkData.error}` 
        })
      }

    } catch (error) {
      setTelegramTestResult({ 
        status: 'error', 
        message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error}` 
      })
    }
  }
EOF

# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ SettingsPanel
cat > /tmp/telegram_test_button.tsx << 'EOF'
        {/* –ö–ù–û–ü–ö–ê –ü–†–û–í–ï–†–ö–ò TELEGRAM –ë–û–¢–ê */}
        <div className="mt-6 p-4 bg-blue-500/10 border border-blue-500/20 rounded-lg">
          <div className="flex items-center justify-between mb-3">
            <h4 className="text-sm font-semibold text-blue-600">üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞</h4>
            <button
              type="button"
              onClick={testTelegramBot}
              disabled={!watchValues.telegram_bot_token || telegramTestResult.status === 'testing'}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-all ${
                watchValues.telegram_bot_token && telegramTestResult.status !== 'testing'
                  ? 'bg-blue-600 hover:bg-blue-700 text-white'
                  : 'bg-gray-400 text-gray-200 cursor-not-allowed'
              }`}
            >
              {telegramTestResult.status === 'testing' ? '‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º...' : 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ—Ç–∞'}
            </button>
          </div>
          
          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ */}
          {telegramTestResult.status !== 'idle' && (
            <div className={`p-3 rounded-lg text-sm ${
              telegramTestResult.status === 'success' ? 'bg-green-500/10 text-green-600 border border-green-500/20' :
              telegramTestResult.status === 'error' ? 'bg-red-500/10 text-red-600 border border-red-500/20' :
              'bg-blue-500/10 text-blue-600 border border-blue-500/20'
            }`}>
              {telegramTestResult.message}
            </div>
          )}
          
          <p className="text-xs text-foreground/50 mt-2">
            üí° –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Telegram API
          </p>
        </div>
EOF

# 4. –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê–ï–ú BACKEND
echo "4Ô∏è‚É£ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º backend..."
pm2 restart backend

# 5. –ü–ï–†–ï–°–û–ë–ò–†–ê–ï–ú FRONTEND
echo "5Ô∏è‚É£ –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º frontend..."
cd frontend
rm -rf .next
npm run build

# 6. –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê–ï–ú FRONTEND
echo "6Ô∏è‚É£ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º frontend..."
pm2 restart frontend

# 7. –ü–†–û–í–ï–†–Ø–ï–ú –°–¢–ê–¢–£–°
echo "7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å..."
pm2 status

echo ""
echo "üéØ –ö–ù–û–ü–ö–ê –ü–†–û–í–ï–†–ö–ò TELEGRAM –ë–û–¢–ê –î–û–ë–ê–í–õ–ï–ù–ê!"
echo "‚úÖ Backend: Endpoint /api/telegram/check-token —Å–æ–∑–¥–∞–Ω"
echo "‚úÖ Frontend: –ü–µ—Ä–µ—Å–æ–±—Ä–∞–Ω —Å –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é"
echo "‚úÖ –°–µ—Ä–≤–∏—Å—ã: –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∞–π—Ç: https://mcp-kv.ru"
echo "üìã –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–∏—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞ 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ—Ç–∞'"
