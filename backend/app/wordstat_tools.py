"""
Yandex Wordstat MCP Tools
–í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Yandex Wordstat API
"""
import httpx
import json
from typing import Optional, Dict, Any, List
from .models import UserSettings
from .helpers import log_api_call, safe_get
import logging
import time

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã Wordstat API
WORDSTAT_API_BASE = "https://api.wordstat.yandex.net/v1"
WORDSTAT_OAUTH_URL = "https://oauth.yandex.ru"


async def validate_wordstat_settings(settings: UserSettings, check_token: bool = True) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Wordstat"""
    if check_token and not settings.wordstat_access_token:
        return False, "–¢–æ–∫–µ–Ω Wordstat –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    return True, ""


async def wordstat_api_call(
    endpoint: str,
    settings: UserSettings,
    json_data: Optional[Dict[str, Any]] = None,
    timeout: int = 30
) -> Dict[str, Any]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ Yandex Wordstat API
    
    Args:
        endpoint: Endpoint API (–Ω–∞–ø—Ä–∏–º–µ—Ä, /userInfo)
        settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        json_data: JSON –¥–∞–Ω–Ω—ã–µ –¥–ª—è POST
        timeout: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞
    
    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–ª–∏ raises Exception
    """
    full_url = f"{WORDSTAT_API_BASE}{endpoint}"
    start_time = time.time()
    
    try:
        async with httpx.AsyncClient() as client:
            resp = await client.post(
                full_url,
                headers={
                    "Authorization": f"Bearer {settings.wordstat_access_token}",
                    "Content-Type": "application/json;charset=utf-8"
                },
                json=json_data or {},
                timeout=timeout
            )
            
            duration_ms = (time.time() - start_time) * 1000
            log_api_call("Wordstat", endpoint, resp.status_code, duration_ms)
            
            logger.info(f"Wordstat API {endpoint} response: {resp.text[:500]}")
            
            resp.raise_for_status()
            return resp.json()
            
    except httpx.HTTPStatusError as e:
        logger.error(f"Wordstat API HTTP error: {e.response.status_code} - {e.response.text}")
        raise Exception(f"Wordstat API –æ—à–∏–±–∫–∞ {e.response.status_code}: {e.response.text[:200]}")
    except httpx.RequestError as e:
        logger.error(f"Wordstat API request error: {str(e)}")
        raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Wordstat: {str(e)}")
    except Exception as e:
        logger.error(f"Wordstat API unexpected error: {str(e)}")
        raise


# ==================== USER INFO ====================

async def wordstat_get_user_info(settings: UserSettings, tool_args: Dict[str, Any]) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Wordstat"""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if not settings.wordstat_access_token and not settings.wordstat_client_id:
        return """‚ùå Wordstat –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:
- Client ID: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
- Access Token: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

üìã –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:
1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ dashboard –ø–æ –∞–¥—Ä–µ—Å—É https://mcp-kv.ru
2. –í —Ä–∞–∑–¥–µ–ª–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è Wordstat:
   - Client ID
   - Client Secret (Application Password)
   - Redirect URI (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å https://oauth.yandex.ru/verification_code)

3. –ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ wordstat_auto_setup –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ OAuth"""
    
    if not settings.wordstat_access_token and settings.wordstat_client_id:
        return f"""‚ö†Ô∏è Wordstat –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ!

–ù–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ:
- Client ID: {settings.wordstat_client_id}
- Client Secret: {settings.wordstat_client_secret or '‚úó –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
- Access Token: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

üîê –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Access Token:
1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:
   https://oauth.yandex.ru/authorize?response_type=token&client_id={settings.wordstat_client_id}

2. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é

3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ access_token –∏–∑ URL

4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ wordstat_set_token —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
    
    # –ï—Å—Ç—å —Ç–æ–∫–µ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ API
    try:
        data = await wordstat_api_call("/userInfo", settings)
        
        if "userInfo" in data:
            user_info = data["userInfo"]
            return f"""‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wordstat —É—Å–ø–µ—à–Ω–æ!

üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
- –õ–æ–≥–∏–Ω: {user_info.get('login', 'N/A')}
- –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {user_info.get('limitPerSecond', 'N/A')}
- –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {user_info.get('dailyLimit', 'N/A')}
- –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {user_info.get('dailyLimitRemaining', 'N/A')}

üéâ –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã Wordstat!
‚Ä¢ wordstat_get_top_requests - —Ç–æ–ø –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ wordstat_get_regions_tree - –¥–µ—Ä–µ–≤–æ —Ä–µ–≥–∏–æ–Ω–æ–≤
‚Ä¢ wordstat_get_dynamics - –¥–∏–Ω–∞–º–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ wordstat_get_regions - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º"""
        else:
            return f"""‚ö†Ô∏è –ù–µ–æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API:
{json.dumps(data, indent=2, ensure_ascii=False)}"""
    
    except Exception as e:
        error_msg = str(e)
        if "401" in error_msg:
            return f"""‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (401 Unauthorized)

üîß –ü—Ä–∏—á–∏–Ω—ã:
1. –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
2. –¢–æ–∫–µ–Ω –±—ã–ª –ø–æ–ª—É—á–µ–Ω –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
3. –£ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Wordstat API

üìã –ß—Ç–æ –¥–µ–ª–∞—Ç—å:
1. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑: 
   https://oauth.yandex.ru/authorize?response_type=token&client_id={settings.wordstat_client_id or 'c654b948515a4a07a4c89648a0831d40'}

2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:
   - –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç–µ—Å—å –ø–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º –Ø–Ω–¥–µ–∫—Å–∞
   - –£ –∞–∫–∫–∞—É–Ω—Ç–∞ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ Wordstat
   - Client ID –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π"""
        
        return f"""‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Wordstat API:
{error_msg}

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."""


# ==================== REGIONS ====================

async def wordstat_get_regions_tree(settings: UserSettings, tool_args: Dict[str, Any]) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ä–µ–≤–æ —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    is_valid, error_msg = await validate_wordstat_settings(settings)
    if not is_valid:
        return f"‚ùå {error_msg}"
    
    try:
        data = await wordstat_api_call("/getRegionsTree", settings)
        
        # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä—è–º—É—é (–Ω–µ –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–æ–º 'regions')
        if isinstance(data, list):
            regions_list = data
        elif isinstance(data, dict) and 'regions' in data:
            regions_list = data['regions']
        else:
            return f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API. –¢–∏–ø: {type(data)}"
        
        result = "‚úÖ –î–µ—Ä–µ–≤–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ Yandex Wordstat:\n\n"
        
        def format_regions(regions, level=0):
            text = ""
            if not isinstance(regions, list):
                return "‚ö†Ô∏è –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤\n"
            
            for region in regions[:20] if level == 0 else regions:
                if not isinstance(region, dict):
                    continue
                
                indent = "  " * level
                region_id = region.get('value') or region.get('id', 'N/A')
                region_name = region.get('label') or region.get('name', 'N/A')
                text += f"{indent}‚Ä¢ {region_name} (ID: {region_id})\n"
                
                children = region.get('children')
                if children and isinstance(children, list):
                    text += format_regions(children, level + 1)
            
            return text
        
        result += format_regions(regions_list)
        result += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
        
        return result
    
    except Exception as e:
        logger.error(f"Wordstat /v1/getRegionsTree exception: {str(e)}", exc_info=True)
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"


# ==================== TOP REQUESTS ====================

async def wordstat_get_top_requests(settings: UserSettings, tool_args: Dict[str, Any]) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"""
    phrase = tool_args.get("phrase")
    
    if not phrase:
        return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Ñ—Ä–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–∞—Ä–∞–º–µ—Ç—Ä 'phrase')"
    
    is_valid, error_msg = await validate_wordstat_settings(settings)
    if not is_valid:
        return f"‚ùå {error_msg}"
    
    num_phrases = tool_args.get("numPhrases", 50)
    regions = tool_args.get("regions", [225])  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –†–æ—Å—Å–∏—è
    devices = tool_args.get("devices", ["all"])
    
    try:
        data = await wordstat_api_call(
            "/topRequests",
            settings,
            json_data={
                "phrase": phrase,
                "numPhrases": num_phrases,
                "regions": regions,
                "devices": devices
            }
        )
        
        if isinstance(data, dict) and 'topRequests' in data:
            requests_list = data['topRequests']
            
            if not requests_list:
                return f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É '{phrase}'"
            
            result = f"‚úÖ –¢–æ–ø –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{phrase}':\n\n"
            for idx, req in enumerate(requests_list[:20], 1):
                phrase_text = req.get('phrase', 'N/A')
                shows = req.get('shows', 'N/A')
                result += f"{idx}. {phrase_text} - –ø–æ–∫–∞–∑–æ–≤: {shows}\n"
            
            if len(requests_list) > 20:
                result += f"\n... –∏ –µ—â—ë {len(requests_list) - 20} –∑–∞–ø—Ä–æ—Å–æ–≤"
            
            return result
        else:
            return f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {json.dumps(data, indent=2, ensure_ascii=False)[:300]}"
    
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"


# ==================== DYNAMICS ====================

async def wordstat_get_dynamics(settings: UserSettings, tool_args: Dict[str, Any]) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤"""
    phrase = tool_args.get("phrase")
    
    if not phrase:
        return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Ñ—Ä–∞–∑–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–∞—Ä–∞–º–µ—Ç—Ä 'phrase')"
    
    is_valid, error_msg = await validate_wordstat_settings(settings)
    if not is_valid:
        return f"‚ùå {error_msg}"
    
    regions = tool_args.get("regions", [225])
    devices = tool_args.get("devices", ["all"])
    
    try:
        data = await wordstat_api_call(
            "/dynamics",
            settings,
            json_data={
                "phrase": phrase,
                "regions": regions,
                "devices": devices
            }
        )
        
        if isinstance(data, dict) and 'dynamics' in data:
            dynamics_data = data['dynamics']
            
            if not dynamics_data:
                return f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∏–Ω–∞–º–∏–∫–µ –¥–ª—è '{phrase}'"
            
            result = f"‚úÖ –î–∏–Ω–∞–º–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ '{phrase}':\n\n"
            for entry in dynamics_data:
                period = entry.get('period', 'N/A')
                shows = entry.get('shows', 'N/A')
                result += f"{period}: {shows} –ø–æ–∫–∞–∑–æ–≤\n"
            
            return result
        else:
            return f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {json.dumps(data, indent=2, ensure_ascii=False)[:300]}"
    
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"


# ==================== REGIONS STATS ====================

async def wordstat_get_regions(settings: UserSettings, tool_args: Dict[str, Any]) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º"""
    phrase = tool_args.get("phrase")
    
    if not phrase:
        return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Ñ—Ä–∞–∑–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–∞—Ä–∞–º–µ—Ç—Ä 'phrase')"
    
    is_valid, error_msg = await validate_wordstat_settings(settings)
    if not is_valid:
        return f"‚ùå {error_msg}"
    
    regions = tool_args.get("regions", [225])
    devices = tool_args.get("devices", ["all"])
    
    try:
        data = await wordstat_api_call(
            "/regions",
            settings,
            json_data={
                "phrase": phrase,
                "regions": regions,
                "devices": devices
            }
        )
        
        if isinstance(data, dict) and 'regions' in data:
            regions_data = data['regions']
            
            if not regions_data:
                return f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –¥–ª—è '{phrase}'"
            
            result = f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –¥–ª—è '{phrase}':\n\n"
            for entry in regions_data[:20]:
                region_id = entry.get('regionId', 'N/A')
                region_name = entry.get('regionName', 'N/A')
                shows = entry.get('shows', 'N/A')
                result += f"{region_name} (ID: {region_id}): {shows} –ø–æ–∫–∞–∑–æ–≤\n"
            
            if len(regions_data) > 20:
                result += f"\n... –∏ –µ—â—ë {len(regions_data) - 20} —Ä–µ–≥–∏–æ–Ω–æ–≤"
            
            return result
        else:
            return f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {json.dumps(data, indent=2, ensure_ascii=False)[:300]}"
    
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"


# ==================== SET TOKEN ====================

async def wordstat_set_token(settings: UserSettings, tool_args: Dict[str, Any], db) -> str:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω Wordstat"""
    from .database import SessionLocal
    
    token = tool_args.get("token")
    
    if not token:
        return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω (–ø–∞—Ä–∞–º–µ—Ç—Ä 'token')"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É
    settings.wordstat_access_token = token
    db.commit()
    
    return f"""‚úÖ –¢–æ–∫–µ–Ω Wordstat —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!

–¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:
‚Ä¢ wordstat_get_user_info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
‚Ä¢ wordstat_get_top_requests - —Ç–æ–ø –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
‚Ä¢ wordstat_get_regions_tree - —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤
‚Ä¢ wordstat_get_dynamics - –¥–∏–Ω–∞–º–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ wordstat_get_regions - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º"""


# ==================== AUTO SETUP ====================

async def wordstat_auto_setup(settings: UserSettings, tool_args: Dict[str, Any]) -> str:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Wordstat —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
    
    status_lines = [
        "üîß –°—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Yandex Wordstat:",
        "",
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Client ID
    if settings.wordstat_client_id:
        status_lines.append(f"‚úÖ Client ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {settings.wordstat_client_id}")
    else:
        status_lines.append("‚ùå Client ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        status_lines.append("")
        status_lines.append("üìã –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Client ID:")
        status_lines.append("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://oauth.yandex.ru")
        status_lines.append("2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        status_lines.append("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Client ID –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        status_lines.append("4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –Ω–∞ dashboard")
    
    status_lines.append("")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Client Secret
    if settings.wordstat_client_secret:
        status_lines.append("‚úÖ Client Secret –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        status_lines.append("‚ùå Client Secret –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    status_lines.append("")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Access Token
    if settings.wordstat_access_token:
        status_lines.append("‚úÖ Access Token –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        status_lines.append("")
        status_lines.append("üéâ Wordstat –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        status_lines.append("")
        status_lines.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: wordstat_get_user_info")
    else:
        status_lines.append("‚ùå Access Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if settings.wordstat_client_id:
            status_lines.append("")
            status_lines.append("üîê –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Access Token:")
            status_lines.append(f"1. –û—Ç–∫—Ä–æ–π—Ç–µ: https://oauth.yandex.ru/authorize?response_type=token&client_id={settings.wordstat_client_id}")
            status_lines.append("2. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é")
            status_lines.append("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ access_token –∏–∑ URL")
            status_lines.append("4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ wordstat_set_token –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        else:
            status_lines.append("")
            status_lines.append("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Client ID –∏ Client Secret –≤ —Ä–∞–∑–¥–µ–ª–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'")
    
    status_lines.append("")
    status_lines.append("üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    status_lines.append("")
    status_lines.append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
    status_lines.append("‚Ä¢ wordstat_get_top_requests - —Ç–æ–ø –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É")
    status_lines.append("‚Ä¢ wordstat_get_regions_tree - —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤")
    status_lines.append("‚Ä¢ wordstat_get_dynamics - –¥–∏–Ω–∞–º–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤")
    status_lines.append("‚Ä¢ wordstat_get_regions - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
    status_lines.append("")
    status_lines.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: wordstat_get_user_info")
    
    return "\n".join(status_lines)


# ==================== TOOL ROUTER ====================

async def handle_wordstat_tool(tool_name: str, settings: UserSettings, tool_args: Dict[str, Any], db) -> str:
    """
    –†–æ—É—Ç–µ—Ä –¥–ª—è –≤—Å–µ—Ö Wordstat –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    
    Args:
        tool_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tool_args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        db: Database session (–¥–ª—è set_token)
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
    """
    tools_map = {
        "wordstat_get_user_info": wordstat_get_user_info,
        "wordstat_get_regions_tree": wordstat_get_regions_tree,
        "wordstat_get_top_requests": wordstat_get_top_requests,
        "wordstat_get_dynamics": wordstat_get_dynamics,
        "wordstat_get_regions": wordstat_get_regions,
        "wordstat_auto_setup": wordstat_auto_setup,
    }
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ handlers, —Ç—Ä–µ–±—É—é—â–∏–µ db session
    if tool_name == "wordstat_set_token":
        return await wordstat_set_token(settings, tool_args, db)
    
    handler = tools_map.get(tool_name)
    if not handler:
        return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π Wordstat –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}"
    
    try:
        return await handler(settings, tool_args)
    except Exception as e:
        logger.error(f"Wordstat tool {tool_name} error: {str(e)}")
        return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {tool_name}: {str(e)}"

