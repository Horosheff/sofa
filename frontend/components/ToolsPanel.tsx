'use client'

import { useState, useEffect } from 'react'
import axios from 'axios'
import { useAuthStore } from '@/store/authStore'

interface Tool {
  name: string
  description: string
  category: string
  params: Record<string, any>
}

interface UserSettings {
  has_wordpress_credentials: boolean
  has_wordstat_credentials: boolean
}

export default function ToolsPanel() {
  const [tools, setTools] = useState<Record<string, string[]>>({})
  const [selectedTool, setSelectedTool] = useState<string>('')
  const [params, setParams] = useState<Record<string, any>>({})
  const [result, setResult] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [settings, setSettings] = useState<UserSettings>({})
  const { token } = useAuthStore()

  useEffect(() => {
    loadTools()
    loadSettings()
  }, [])

  const loadTools = async () => {
    try {
      const response = await axios.get('/api/mcp/tools')
      setTools(response.data)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:', error)
    }
  }

  const loadSettings = async () => {
    try {
      const response = await axios.get('/api/user/settings', {
        headers: { Authorization: `Bearer ${token}` }
      })
      setSettings(response.data)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error)
    }
  }

  const executeTool = async () => {
    if (!selectedTool) return
    
    setIsLoading(true)
    setResult(null)
    
    try {
      const response = await axios.post('/api/mcp/execute', {
        tool: selectedTool,
        params: params
      }, {
        headers: { Authorization: `Bearer ${token}` }
      })
      setResult(response.data)
    } catch (error: any) {
      setResult({
        success: false,
        message: error.response?.data?.detail || '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã'
      })
    } finally {
      setIsLoading(false)
    }
  }

  const getToolDescription = (tool: string): string => {
    const descriptions: Record<string, string> = {
      // WordPress tools
      'create_post': '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç –≤ WordPress',
      'update_post': '–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç',
      'get_posts': '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤',
      'delete_post': '–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç',
      'search_posts': '–ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤',
      'bulk_update_posts': '–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤',
      'create_category': '–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
      'get_categories': '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
      'update_category': '–û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
      'delete_category': '–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
      'upload_media': '–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª',
      'upload_image_from_url': '–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL',
      'get_media': '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤',
      'delete_media': '–£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª',
      'create_comment': '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
      'get_comments': '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏',
      'update_comment': '–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
      'delete_comment': '–£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
      
      // Wordstat tools
      'set_wordstat_token': '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω Wordstat',
      'get_wordstat_regions_tree': '–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ä–µ–≤–æ —Ä–µ–≥–∏–æ–Ω–æ–≤',
      'get_wordstat_top_requests': '–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∑–∞–ø—Ä–æ—Å–æ–≤',
      'get_wordstat_dynamics': '–ü–æ–ª—É—á–∏—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤',
      'get_wordstat_regions': '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–≥–∏–æ–Ω—ã',
      'get_wordstat_user_info': '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ',
      'auto_setup_wordstat': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Wordstat',
      
      // Google tools
      'google_trends': '–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã Google',
      'google_search_volume': '–û–±—ä–µ–º –ø–æ–∏—Å–∫–∞ –≤ Google',
      'google_keywords': '–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ Google',
      'google_analytics': '–î–∞–Ω–Ω—ã–µ Google Analytics',
      'google_ads': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Google Ads',
      'youtube_analytics': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ YouTube',
      'google_maps': '–î–∞–Ω–Ω—ã–µ Google Maps'
    }
    return descriptions[tool] || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'
  }

  const getDefaultParams = (tool: string): Record<string, any> => {
    const defaults: Record<string, Record<string, any>> = {
      'create_post': { title: '', content: '', status: 'draft' },
      'update_post': { post_id: '', title: '', content: '' },
      'get_posts': { per_page: 10, page: 1 },
      'delete_post': { post_id: '' },
      'search_posts': { search: '', per_page: 10 },
      'bulk_update_posts': { post_ids: [], updates: {} },
      'create_category': { name: '', description: '' },
      'get_categories': { per_page: 10 },
      'update_category': { category_id: '', name: '', description: '' },
      'delete_category': { category_id: '' },
      'upload_media': { file_path: '', alt_text: '' },
      'upload_image_from_url': { image_url: '', alt_text: '' },
      'get_media': { per_page: 10 },
      'delete_media': { media_id: '' },
      'create_comment': { post_id: '', content: '', author: '' },
      'get_comments': { post_id: '', per_page: 10 },
      'update_comment': { comment_id: '', content: '' },
      'delete_comment': { comment_id: '' },
      'set_wordstat_token': { token: '' },
      'get_wordstat_regions_tree': {},
      'get_wordstat_top_requests': { phrase: '', regions: [] },
      'get_wordstat_dynamics': { phrase: '', regions: [] },
      'get_wordstat_regions': {},
      'get_wordstat_user_info': {},
      'auto_setup_wordstat': {}
    }
    return defaults[tool] || {}
  }

  const canUseTool = (tool: string): boolean => {
    if (tool.startsWith('wordpress_')) {
      return settings.has_wordpress_credentials
    }
    if (tool.startsWith('wordstat_')) {
      return settings.has_wordstat_credentials
    }
    return true
  }

  const getCategoryColor = (category: string): string => {
    const colors: Record<string, string> = {
      'wordpress': 'bg-blue-100 text-blue-800',
      'wordstat': 'bg-green-100 text-green-800'
    }
    return colors[category] || 'bg-gray-100 text-gray-800'
  }

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="text-center">
        <h2 className="text-3xl font-bold gradient-text mb-4">MCP –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</h2>
        <p className="text-white/70">–£–ø—Ä–∞–≤–ª—è–π—Ç–µ WordPress, Wordstat –∏ Google —Å–µ—Ä–≤–∏—Å–∞–º–∏</p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Tools List */}
        <div className="modern-card p-6">
          <h3 className="text-xl font-bold text-white mb-6 flex items-center">
            üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
          </h3>
          
          <div className="space-y-6">
            {/* WordPress Tools */}
            <div>
              <h4 className="text-lg font-semibold text-indigo-300 mb-4 flex items-center">
                üìù WordPress
              </h4>
              <div className="grid grid-cols-1 gap-3">
                {[
                  'create_post', 'update_post', 'get_posts', 'delete_post', 
                  'search_posts', 'create_category', 'get_categories', 'upload_media'
                ].map((tool) => (
                  <button
                    key={tool}
                    onClick={() => {
                      setSelectedTool(tool)
                      setParams(getDefaultParams(tool))
                    }}
                    className={`modern-card p-4 text-left transition-all duration-300 ${
                      selectedTool === tool
                        ? 'neon-glow border-indigo-400'
                        : 'hover:border-white/30'
                    }`}
                  >
                    <div className="flex items-center justify-between mb-2">
                      <span className="font-semibold text-white">{tool}</span>
                      <span className="px-2 py-1 rounded-full text-xs bg-indigo-500/20 text-indigo-300">
                        WordPress
                      </span>
                    </div>
                    <p className="text-sm text-white/70">
                      {getToolDescription(tool)}
                    </p>
                  </button>
                ))}
              </div>
            </div>

            {/* Wordstat Tools */}
            <div>
              <h4 className="text-lg font-semibold text-green-300 mb-4 flex items-center">
                üìä Wordstat
              </h4>
              <div className="grid grid-cols-1 gap-3">
                {[
                  'set_wordstat_token', 'get_wordstat_regions_tree', 
                  'get_wordstat_top_requests', 'get_wordstat_dynamics'
                ].map((tool) => (
                  <button
                    key={tool}
                    onClick={() => {
                      setSelectedTool(tool)
                      setParams(getDefaultParams(tool))
                    }}
                    className={`modern-card p-4 text-left transition-all duration-300 ${
                      selectedTool === tool
                        ? 'neon-glow border-green-400'
                        : 'hover:border-white/30'
                    }`}
                  >
                    <div className="flex items-center justify-between mb-2">
                      <span className="font-semibold text-white">{tool}</span>
                      <span className="px-2 py-1 rounded-full text-xs bg-green-500/20 text-green-300">
                        Wordstat
                      </span>
                    </div>
                    <p className="text-sm text-white/70">
                      {getToolDescription(tool)}
                    </p>
                  </button>
                ))}
              </div>
            </div>

            {/* Google Tools */}
            <div>
              <h4 className="text-lg font-semibold text-red-300 mb-4 flex items-center">
                üîç Google (MCP)
              </h4>
              <div className="grid grid-cols-1 gap-3">
                {[
                  'google_trends', 'google_search_volume', 'google_keywords',
                  'google_analytics', 'google_ads', 'youtube_analytics'
                ].map((tool) => (
                  <button
                    key={tool}
                    onClick={() => {
                      setSelectedTool(tool)
                      setParams(getDefaultParams(tool))
                    }}
                    className={`modern-card p-4 text-left transition-all duration-300 ${
                      selectedTool === tool
                        ? 'neon-glow border-red-400'
                        : 'hover:border-white/30'
                    }`}
                  >
                    <div className="flex items-center justify-between mb-2">
                      <span className="font-semibold text-white">{tool}</span>
                      <span className="px-2 py-1 rounded-full text-xs bg-red-500/20 text-red-300">
                        MCP
                      </span>
                    </div>
                    <p className="text-sm text-white/70">
                      {getToolDescription(tool)}
                    </p>
                    <p className="text-xs text-green-400 mt-1">
                      ‚úÖ –ù–µ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä
                    </p>
                  </button>
                ))}
              </div>
            </div>

          </div>
        </div>

        {/* Tool Execution */}
        <div className="modern-card p-6">
          <h3 className="text-xl font-bold text-white mb-6 flex items-center">
            ‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
          </h3>
          
          {selectedTool ? (
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-white/80 mb-3">
                  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è <span className="text-indigo-300">{selectedTool}</span>
                </label>
                <div className="space-y-4">
                  {Object.entries(params).map(([key, value]) => (
                    <div key={key}>
                      <label className="block text-sm font-medium text-white/70 mb-2">
                        {key}
                      </label>
                      <input
                        type={key.includes('password') || key.includes('secret') ? 'password' : 'text'}
                        value={value}
                        onChange={(e) => setParams({...params, [key]: e.target.value})}
                        className="modern-input w-full"
                        placeholder={`–í–≤–µ–¥–∏—Ç–µ ${key}`}
                      />
                    </div>
                  ))}
                </div>
              </div>
              
              <button
                onClick={executeTool}
                disabled={isLoading}
                className="btn-primary w-full py-3 text-lg font-semibold disabled:opacity-50"
              >
                {isLoading ? '‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...' : 'üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å'}
              </button>
            </div>
          ) : (
            <div className="text-center py-12">
              <div className="text-6xl mb-4">üéØ</div>
              <p className="text-white/60 text-lg">–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</p>
            </div>
          )}
        </div>
      </div>

      {/* Results */}
      {result && (
        <div className="modern-card p-6">
          <h3 className="text-xl font-bold text-white mb-4 flex items-center">
            üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
          </h3>
          <div className={`p-4 rounded-lg ${
            result.success 
              ? 'bg-green-500/10 border border-green-500/20' 
              : 'bg-red-500/10 border border-red-500/20'
          }`}>
            <pre className="text-sm text-white/80 overflow-auto max-h-96 whitespace-pre-wrap">
              {JSON.stringify(result, null, 2)}
            </pre>
          </div>
        </div>
      )}
    </div>
  )
}