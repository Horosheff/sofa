#!/bin/bash
# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram —Ç–æ–∫–µ–Ω–∞ –≤ SettingsPanel.tsx

echo "üîÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ö–ù–û–ü–ö–ò –ü–†–û–í–ï–†–ö–ò TELEGRAM –¢–û–ö–ï–ù–ê"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

cd /opt/sofiya/frontend

# –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
cp components/SettingsPanel.tsx components/SettingsPanel.tsx.backup_$(date +%Y%m%d_%H%M%S)
echo "‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è SettingsPanel.tsx"

# –°–æ–∑–¥–∞—Ç—å Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–Ω–æ–ø–∫–∏
cat > /tmp/add_telegram_button.py << 'PYTHON_SCRIPT'
#!/usr/bin/env python3

# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
with open('components/SettingsPanel.tsx', 'r', encoding='utf-8') as f:
    content = f.read()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ—É–Ω–∫—Ü–∏—è
if 'testTelegramBot' in content:
    print("‚úÖ –ö–Ω–æ–ø–∫–∞ —É–∂–µ –µ—Å—Ç—å")
    exit(0)

# 1. –î–æ–±–∞–≤–ª—è–µ–º state –¥–ª—è Telegram —Ç–µ—Å—Ç–∞ –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö useState
state_addition = '''  const [telegramTestResult, setTelegramTestResult] = useState<string | null>(null)
  const [isTelegramTesting, setIsTelegramTesting] = useState(false)
'''

# –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ useState
import re
last_usestate = list(re.finditer(r'const \[.*?\] = useState', content))[-1]
insert_pos = content.find('\n', last_usestate.end()) + 1
content = content[:insert_pos] + state_addition + content[insert_pos:]

# 2. –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é testTelegramBot –ø–æ—Å–ª–µ onSubmit
function_addition = '''
  const testTelegramBot = async () => {
    setIsTelegramTesting(true)
    setTelegramTestResult(null)
    try {
      // 1. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω
      await handleSubmit(onSubmit)()

      // 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω
      const response = await fetch('/telegram/check-token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
      })
      const data = await response.json()

      if (response.ok) {
        setTelegramTestResult(data.message)
        success(data.message)
      } else {
        setTelegramTestResult(data.detail || data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        error(data.detail || data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
      }
    } catch (err: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram —Ç–æ–∫–µ–Ω–∞:', err)
      setTelegramTestResult(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${err.message}`)
      error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${err.message}`)
    } finally {
      setIsTelegramTesting(false)
    }
  }
'''

# –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ onSubmit
onsubmit_match = re.search(r'const onSubmit = async.*?\n  \}', content, re.DOTALL)
if onsubmit_match:
    insert_pos = onsubmit_match.end() + 1
    content = content[:insert_pos] + function_addition + content[insert_pos:]
    print("‚úÖ –§—É–Ω–∫—Ü–∏—è testTelegramBot –¥–æ–±–∞–≤–ª–µ–Ω–∞")

# 3. –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–µ–∫—Ü–∏—é Telegram Bot
button_html = '''                <div className="mt-6">
                  <button
                    type="button"
                    onClick={testTelegramBot}
                    disabled={isTelegramTesting || !watchValues.telegram_bot_token}
                    className={`
                      w-full py-3 px-6 rounded-lg text-lg font-semibold
                      transition-all duration-200 ease-in-out
                      flex items-center justify-center gap-3
                      ${isTelegramTesting
                        ? 'bg-gray-500 cursor-not-allowed'
                        : 'bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 active:scale-95 shadow-lg hover:shadow-xl'
                      }
                    `}
                  >
                    {isTelegramTesting ? (
                      <>
                        <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        –ü—Ä–æ–≤–µ—Ä–∫–∞...
                      </>
                    ) : (
                      <>
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2">
                          <path strokeLinecap="round" strokeLinejoin="round" d="M15 13l-3 3m0 0l-3-3m3 3V8m0 13a9 9 0 110-18 9 9 0 010 18z" />
                        </svg>
                        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
                      </>
                    )}
                  </button>
                  {telegramTestResult && (
                    <div className={`
                      mt-4 p-4 rounded-lg border-l-4
                      ${telegramTestResult.startsWith('‚úÖ') ? 'bg-green-100 border-green-500 text-green-800' : 'bg-red-100 border-red-500 text-red-800'}
                      flex items-center gap-3
                    `}>
                      {telegramTestResult.startsWith('‚úÖ') ? (
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2">
                          <path strokeLinecap="round" strokeLinejoin="round" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                      ) : (
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2">
                          <path strokeLinecap="round" strokeLinejoin="round" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                      )}
                      <p className="text-sm font-medium">{telegramTestResult}</p>
                    </div>
                  )}
                </div>
'''

# –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π div —Å–µ–∫—Ü–∏–∏ Telegram (–ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ PasswordField –¥–ª—è telegram_webhook_secret)
telegram_section = re.search(r'<PasswordField[^>]*name="telegram_webhook_secret"[^/]*/>.*?\n\s*</div>', content, re.DOTALL)
if telegram_section:
    insert_pos = content.find('</div>', telegram_section.end() - 10)
    content = content[:insert_pos] + button_html + '\n              ' + content[insert_pos:]
    print("‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ UI")

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
with open('components/SettingsPanel.tsx', 'w', encoding='utf-8') as f:
    f.write(content)

print("‚úÖ –ü–∞—Ç—á –ø—Ä–∏–º–µ–Ω–µ–Ω!")
PYTHON_SCRIPT

# –ó–∞–ø—É—Å—Ç–∏—Ç—å Python —Å–∫—Ä–∏–ø—Ç
python3 /tmp/add_telegram_button.py

# –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
rm /tmp/add_telegram_button.py

echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "‚úÖ –ü–ê–¢–ß –ü–†–ò–ú–ï–ù–ï–ù!"
echo ""
echo "üîÑ –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º frontend..."
pm2 stop frontend
rm -rf .next
npm run build
pm2 start frontend

echo ""
echo "‚úÖ –ì–û–¢–û–í–û! –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram —Ç–æ–∫–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"

