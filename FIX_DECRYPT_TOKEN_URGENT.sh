#!/bin/bash
# –°–†–û–ß–ù–´–ô –ü–ê–¢–ß: –î–æ–±–∞–≤–∏—Ç—å decrypt_token –≤ helpers.py

echo "üö® –°–†–û–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º decrypt_token –≤ helpers.py"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

cd /opt/sofiya/backend

# –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
cp app/helpers.py app/helpers.py.backup_$(date +%Y%m%d_%H%M%S)
echo "‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è helpers.py"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ decrypt_token
if grep -q "def decrypt_token" app/helpers.py; then
    echo "‚úÖ decrypt_token —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    exit 0
fi

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
cat > /tmp/encryption_functions.py << 'PYTHON_CODE'
import os
from cryptography.fernet import Fernet
import logging

logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
FERNET_KEY = os.getenv("FERNET_KEY")
if FERNET_KEY:
    try:
        cipher_suite = Fernet(FERNET_KEY.encode('utf-8'))
        logger.info("‚úÖ –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
        cipher_suite = None
else:
    logger.warning("‚ö†Ô∏è  FERNET_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ/—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    cipher_suite = None

def encrypt_token(token: str) -> str:
    """
    –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω
    
    Args:
        token: –¢–æ–∫–µ–Ω –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    
    Returns:
        –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    """
    if not cipher_suite:
        raise ValueError("–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω.")
    if not token:
        return token
    try:
        return cipher_suite.encrypt(token.encode('utf-8')).decode('utf-8')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        raise

def decrypt_token(encrypted_token: str) -> str:
    """
    –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω
    
    Args:
        encrypted_token: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    
    Returns:
        –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    """
    if not cipher_suite:
        raise ValueError("–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω.")
    if not encrypted_token:
        return encrypted_token
    try:
        return cipher_suite.decrypt(encrypted_token.encode('utf-8')).decode('utf-8')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        raise

PYTHON_CODE

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –Ω–∞—á–∞–ª–æ helpers.py (–ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤)
python3 << 'PYTHON_SCRIPT'
# –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
with open('app/helpers.py', 'r', encoding='utf-8') as f:
    content = f.read()

# –ß–∏—Ç–∞–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
with open('/tmp/encryption_functions.py', 'r', encoding='utf-8') as f:
    encryption_code = f.read()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–º–ø–æ—Ä—Ç logging
if 'import logging' not in content:
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç logging –≤ –Ω–∞—á–∞–ª–æ
    content = "import logging\n" + content

# –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
import_end = 0
for i, line in enumerate(content.split('\n')):
    if line.startswith('import ') or line.startswith('from '):
        import_end = i + 1
    elif line.strip() and not line.startswith('#'):
        break

lines = content.split('\n')
# –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
lines.insert(import_end, '\n' + encryption_code + '\n')

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
with open('app/helpers.py', 'w', encoding='utf-8') as f:
    f.write('\n'.join(lines))

print("‚úÖ –§—É–Ω–∫—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ helpers.py")
PYTHON_SCRIPT

# –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
rm /tmp/encryption_functions.py

echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "‚úÖ –ü–ê–¢–ß –ü–†–ò–ú–ï–ù–ï–ù!"
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã
if grep -q "def decrypt_token" app/helpers.py; then
    echo "‚úÖ decrypt_token –Ω–∞–π–¥–µ–Ω –≤ helpers.py"
else
    echo "‚ùå –û–®–ò–ë–ö–ê: decrypt_token –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    exit 1
fi

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cryptography –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
source venv/bin/activate
pip list | grep cryptography > /dev/null
if [ $? -ne 0 ]; then
    echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cryptography..."
    pip install cryptography
else
    echo "‚úÖ cryptography —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º FERNET_KEY
if [ -z "$FERNET_KEY" ]; then
    echo "‚ö†Ô∏è  WARNING: FERNET_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: source SET_ENCRYPTION_KEY.sh"
fi

echo ""
echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º backend..."
pm2 restart backend

echo ""
echo "‚úÖ –ì–û–¢–û–í–û!"

