#!/bin/bash

# üîê –î–û–ë–ê–í–õ–ï–ù–ò–ï –§–£–ù–ö–¶–ò–ò encrypt_token –í HELPERS.PY
echo "üîê –î–û–ë–ê–í–õ–ï–ù–ò–ï –§–£–ù–ö–¶–ò–ò encrypt_token –í HELPERS.PY"
echo "================================================"

cd /opt/sofiya/backend/app

# 1. –°–û–ó–î–ê–ï–ú –ë–≠–ö–ê–ü
echo "1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø helpers.py..."
cp helpers.py helpers.py.backup_encrypt_$(date +%Y%m%d_%H%M%S)

# 2. –î–û–ë–ê–í–õ–Ø–ï–ú –§–£–ù–ö–¶–ò–ò –®–ò–§–†–û–í–ê–ù–ò–Ø
echo "2Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è..."
python3 << 'PYTHON_SCRIPT'
with open('helpers.py', 'r', encoding='utf-8') as f:
    content = f.read()

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
imports_to_add = '''import os
from cryptography.fernet import Fernet
'''

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã
if 'from cryptography.fernet import Fernet' not in content:
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    content = content.replace(
        'import logging\n',
        'import logging\n' + imports_to_add
    )
    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è")
else:
    print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã —É–∂–µ –µ—Å—Ç—å")

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
encryption_functions = '''

# ==================== ENCRYPTION / DECRYPTION ====================

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENCRYPTION_KEY = os.getenv("ENCRYPTION_KEY") or os.getenv("FERNET_KEY")

if not ENCRYPTION_KEY:
    logger.warning("‚ö†Ô∏è  ENCRYPTION_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á...")
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    ENCRYPTION_KEY = Fernet.generate_key().decode('utf-8')
    logger.warning(f"‚ö†Ô∏è  –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á: {ENCRYPTION_KEY}")
    logger.warning("‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ENCRYPTION_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

cipher_suite = Fernet(ENCRYPTION_KEY.encode('utf-8') if isinstance(ENCRYPTION_KEY, str) else ENCRYPTION_KEY)


def encrypt_token(token: str) -> str:
    """
    –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    
    Args:
        token: –¢–æ–∫–µ–Ω –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    
    Returns:
        –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω (str)
    """
    if not token:
        return token
    
    try:
        encrypted = cipher_suite.encrypt(token.encode('utf-8'))
        return encrypted.decode('utf-8')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω: {e}")


def decrypt_token(encrypted_token: str) -> str:
    """
    –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞
    
    Args:
        encrypted_token: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    
    Returns:
        –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω (str)
    """
    if not encrypted_token:
        return encrypted_token
    
    try:
        decrypted = cipher_suite.decrypt(encrypted_token.encode('utf-8'))
        return decrypted.decode('utf-8')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω: {e}")
'''

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
if 'def encrypt_token' not in content:
    content += encryption_functions
    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ encrypt_token –∏ decrypt_token")
else:
    print("‚úÖ –§—É–Ω–∫—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ –µ—Å—Ç—å")

with open('helpers.py', 'w', encoding='utf-8') as f:
    f.write(content)

print("‚úÖ –§–∞–π–ª helpers.py –æ–±–Ω–æ–≤–ª–µ–Ω")
PYTHON_SCRIPT

# 3. –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –§–£–ù–ö–¶–ò–ò –î–û–ë–ê–í–õ–ï–ù–´
echo ""
echo "3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã..."
if grep -q "def encrypt_token" helpers.py && grep -q "def decrypt_token" helpers.py; then
    echo "‚úÖ –§—É–Ω–∫—Ü–∏–∏ encrypt_token –∏ decrypt_token –Ω–∞–π–¥–µ–Ω—ã"
else
    echo "‚ùå –§—É–Ω–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    exit 1
fi

# 4. –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú CRYPTOGRAPHY
echo ""
echo "4Ô∏è‚É£ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cryptography..."
cd /opt/sofiya/backend
source venv/bin/activate
pip install cryptography

# 5. –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê–ï–ú BACKEND
echo ""
echo "5Ô∏è‚É£ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º backend..."
cd /opt/sofiya
pm2 restart backend

# 6. –ñ–î–ï–ú –ó–ê–ü–£–°–ö–ê
echo "6Ô∏è‚É£ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞..."
sleep 5

# 7. –ü–†–û–í–ï–†–Ø–ï–ú –°–¢–ê–¢–£–°
echo "7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å..."
pm2 status

# 8. –ü–†–û–í–ï–†–Ø–ï–ú –õ–û–ì–ò
echo "8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏..."
pm2 logs backend --lines 15 --nostream

echo ""
echo "üéØ –§–£–ù–ö–¶–ò–ò –®–ò–§–†–û–í–ê–ù–ò–Ø –î–û–ë–ê–í–õ–ï–ù–´!"
echo "‚úÖ encrypt_token –¥–æ–±–∞–≤–ª–µ–Ω –≤ helpers.py"
echo "‚úÖ decrypt_token –¥–æ–±–∞–≤–ª–µ–Ω –≤ helpers.py"
echo "‚úÖ cryptography —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
echo "‚úÖ Backend –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
echo ""
echo "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–æ–∫–µ–Ω—ã - –æ–Ω–∏ –±—É–¥—É—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã!"
